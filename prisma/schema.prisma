datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// TODO: Add validation for these fields in the application logic
// enum userStatus {
//   active
//   pending
//   expired
//   deactivated
// }

// enum invitationStatus {
//   pending
//   accepted
//   deactivated
// }

model Comment {
  id              String            @id @default(uuid())
  submittedBy     String? // Foreign key for User
  comment         String
  isPrivate       Boolean?          @default(false) @map("is_private")
  createdDate     DateTime?         @default(now()) @map("created_date")
  updatedDate     DateTime?         @default(now()) @map("updated_date")
  user            User?             @relation("UserComments", fields: [submittedBy], references: [id])
  RecipeComment   RecipeComment[]
  MenuComments    MenuComments[]
  EventComment    EventComment[]
  UsefulComment   UsefulComment[]
  FeedbackComment FeedbackComment[]

  @@map("comments")
}

model UsefulComment {
  id          String    @id @default(uuid())
  commentId   String // Foreign key for Comment
  userId      String? // Foreign key for User
  createdDate DateTime? @default(now()) @map("created_date")
  updatedDate DateTime? @default(now()) @map("updated_date")
  comment     Comment   @relation(fields: [commentId], references: [id])
  user        User?     @relation(fields: [userId], references: [id])

  @@map("useful_comments")
}

model FeedbackComment {
  id        String  @id @default(uuid())
  commentId String // Foreign key for Comment
  comment   Comment @relation(fields: [commentId], references: [id])

  @@map("feedback_comments")
}

model RecipeComment {
  recipeId  String // Foreign key for Recipe
  commentId String // Foreign key for Comment
  recipe    Recipe  @relation(fields: [recipeId], references: [id])
  comment   Comment @relation(fields: [commentId], references: [id])

  @@id([recipeId, commentId])
  @@map("recipe_comments")
}

model MenuComments {
  menuId    String // Foreign key for Menu
  commentId String // Foreign key for Comment
  menu      Menu    @relation(fields: [menuId], references: [id])
  comment   Comment @relation(fields: [commentId], references: [id])

  @@id([menuId, commentId])
  @@map("menu_comments")
}

model EventComment {
  eventId   String // Foreign key for Event
  commentId String // Foreign key for Comment
  event     Event   @relation(fields: [eventId], references: [id])
  comment   Comment @relation(fields: [commentId], references: [id])

  @@id([eventId, commentId])
  @@map("event_comments")
}

model Event {
  id           String         @id @default(uuid())
  name         String
  hostId       String // Foreign key for User
  eventDate    DateTime?      @map("event_date")
  location     String?
  description  String?
  menuId       String? // Foreign key for Menu
  guests       String?
  chef         String?
  isPrivate    Boolean?       @default(true) @map("is_private")
  createdDate  DateTime?      @default(now()) @map("created_date")
  modifiedDate DateTime?      @default(now()) @map("modified_date")
  host         User           @relation("UserEvents", fields: [hostId], references: [id])
  menu         Menu?          @relation(fields: [menuId], references: [id])
  EventComment EventComment[]

  @@map("events")
}

model MenuRecipe {
  menuId      String // Foreign key for Menu
  recipeId    String // Foreign key for Recipe
  addedBy     String? // Foreign key for User
  createdDate DateTime? @default(now()) @map("created_date")
  updatedDate DateTime? @default(now()) @map("updated_date")
  menu        Menu      @relation(fields: [menuId], references: [id])
  recipe      Recipe    @relation(fields: [recipeId], references: [id])
  addedByUser User?     @relation("UserAddedMenuRecipes", fields: [addedBy], references: [id])

  @@id([menuId, recipeId])
  @@map("menu_recipes")
}

// Inspiration
// https://schema.org/Menu
model Menu {
  id             String         @id @default(uuid())
  userId         String? // Foreign key for User
  name           String
  feedsNumPeople Int?
  createdDate    DateTime?      @default(now()) @map("created_date")
  updatedDate    DateTime?      @default(now()) @map("updated_date")
  User           User?          @relation(fields: [userId], references: [id])
  Event          Event[]
  MenuRecipe     MenuRecipe[]
  MenuTag        MenuTag[]
  MenuComments   MenuComments[]

  @@map("menus")
}

model RecipeIngredient {
  recipeId    String // Foreign key for Recipe
  id          String    @id @default(uuid())
  name        String
  quantity    String?
  unit        String?
  note        String?
  createdDate DateTime? @default(now()) @map("created_date")
  updatedDate DateTime? @default(now()) @map("updated_date")
  recipe      Recipe    @relation(fields: [recipeId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([name], name: "recipe_ingredients_name")
  @@map("recipe_ingredients")
}

model RecipeRating {
  id            String    @id @default(uuid())
  recipeId      String // Foreign key for Recipe
  submittedBy   String // Foreign key for User
  submittedDate DateTime? @default(now()) @map("submitted_date")
  updatedDate   DateTime? @default(now()) @map("updated_date")
  rating        Int
  recipe        Recipe    @relation(fields: [recipeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  user          User      @relation("UserRecipeRatings", fields: [submittedBy], references: [id])

  @@map("recipe_rating")
}

model RecipeTag {
  recipeId    String // Foreign key for Recipe
  tagId       String // Foreign key for Tag
  addedBy     String? // Foreign key for User
  createdDate DateTime? @default(now()) @map("created_date")
  updatedDate DateTime? @default(now()) @map("updated_date")
  recipe      Recipe    @relation(fields: [recipeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  tag         Tag       @relation(fields: [tagId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  User        User?     @relation(fields: [addedBy], references: [id])

  @@id([recipeId, tagId])
  @@map("recipe_tags")
}

model MenuTag {
  menuId      String // Foreign key for Menu
  tagId       String // Foreign key for Tag
  addedBy     String // Foreign key for User
  createdDate DateTime? @default(now()) @map("created_date")
  updatedDate DateTime? @default(now()) @map("updated_date")
  menu        Menu      @relation(fields: [menuId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  tag         Tag       @relation(fields: [tagId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  user        User?     @relation(fields: [addedBy], references: [id])

  @@id([menuId, tagId])
  @@map("menu_tags")
}

// Inspiration
// https://schema.org/Recipe
model Recipe {
  id               String @id @default(uuid())
  title            String
  preparationSteps String @map("preparation_steps")
  submittedBy      String // Foreign key for User

  // Not sure cookingMethod is valuable -- it's caught up in tags/prep steps.
  // cookingMethod     String?            @map("cooking_method")
  cookTime    String?  @map("cook_time")
  description String?
  // Not sure diet is valuable -- it's caught up in tags.
  // diet     string?
  isPrivate   Boolean? @default(false) @map("is_private")
  prepTime    String?  @map("prep_time")
  recipeYield String?  @map("recipe_yield")
  source      String?
  sourceUrl   String?  @map("source_url")
  totalTime   String?  @map("total_time")

  // Relationships
  user              User               @relation("UserSubmittedRecipes", fields: [submittedBy], references: [id])
  menuRecipes       MenuRecipe[]
  recipeRatings     RecipeRating[]
  recipeTags        RecipeTag[]
  // categories and cuisines can be wrapped up in tags i think
  // recipeCategory    String?            @map("recipe_category")
  // recipeCuisine     String?            @map("recipe_cuisine")
  userRecipes       UserRecipe[]
  recipeIngredients RecipeIngredient[]
  RecipeComment     RecipeComment[]
  createdDate       DateTime?          @default(now()) @map("created_date")
  updatedDate       DateTime?          @default(now()) @map("updated_date")

  @@map("recipes")
}

model Tag {
  id          String      @id @default(uuid())
  name        String      @unique
  createdDate DateTime?   @default(now()) @map("created_date")
  updatedDate DateTime?   @default(now()) @map("updated_date")
  RecipeTag   RecipeTag[]
  MenuTag     MenuTag[]

  @@map("tags")
}

model UserRecipe {
  userId      String // Foreign key for User
  recipeId    String // Foreign key for Recipe
  // category    String?
  // tags        String?
  // notes       String?
  cookCount   Int?      @default(0) @map("cook_count")
  lastCooked  DateTime? @map("last_cooked")
  createdDate DateTime? @default(now()) @map("created_date")
  updatedDate DateTime? @default(now()) @map("updated_date")
  user        User      @relation(fields: [userId], references: [id])
  recipe      Recipe    @relation(fields: [recipeId], references: [id])

  @@id([userId, recipeId])
  @@map("user_recipes")
}

model UserInvite {
  id           String    @id @default(uuid())
  email        String?   @unique
  phoneNumber  String?   @unique
  createdDate  DateTime? @default(now()) @map("created_date")
  acceptedDate DateTime? @map("accepted_date")
  status       String?   @default("pending")
  User         User?     @relation(fields: [userId], references: [id])
  userId       String?

  @@map("user_invites")
}

model User {
  id               String          @id @default(uuid())
  username         String          @unique
  email            String?         @unique
  phoneNumber      String?         @unique
  name             String?
  status           String?         @default("pending") // Custom type conversion needed
  createdDate      DateTime?       @default(now()) @map("created_date")
  updatedDate      DateTime?       @default(now()) @map("updated_date")
  lastLoginDate    DateTime?       @default(now()) @map("last_login_date")
  comments         Comment[]       @relation("UserComments")
  events           Event[]         @relation("UserEvents")
  Menu             Menu[]
  addedMenuRecipes MenuRecipe[]    @relation("UserAddedMenuRecipes")
  MenuTag          MenuTag[]
  submittedRecipes Recipe[]        @relation("UserSubmittedRecipes")
  recipeRatings    RecipeRating[]  @relation("UserRecipeRatings")
  RecipeTag        RecipeTag[]
  password         Password?
  userRecipes      UserRecipe[]
  UserInvite       UserInvite[]
  UsefulComment    UsefulComment[]

  @@map("users")
}

model Password {
  encryptedPassword String    @map("encrypted_password")
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId            String    @unique
  createdDate       DateTime? @default(now()) @map("created_date")
  updatedDate       DateTime? @default(now()) @map("updated_date")
}
