datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// TODO: Add validation for these fields in the application logic
// enum userStatus {
//   active
//   pending
//   expired
//   deactivated
// }

// enum invitationStatus {
//   pending
//   accepted
//   deactivated
// }

model Comment {
  id              String            @id @default(uuid())
  submittedBy     String? // Foreign key for User
  comment         String
  isPrivate       Boolean?          @default(false) @map("is_private")
  createdDate     DateTime?         @default(now()) @map("created_date")
  updatedDate     DateTime?         @default(now()) @map("updated_date")
  user            User?             @relation("UserComments", fields: [submittedBy], references: [id])
  RecipeComment   RecipeComment[]
  MenuComments    MenuComments[]
  EventComment    EventComment[]
  UsefulComment   UsefulComment[]
  FeedbackComment FeedbackComment[]

  @@map("comments")
}

model UsefulComment {
  id          String    @id @default(uuid())
  commentId   String // Foreign key for Comment
  userId      String? // Foreign key for User
  createdDate DateTime? @default(now()) @map("created_date")
  updatedDate DateTime? @default(now()) @map("updated_date")
  comment     Comment   @relation(fields: [commentId], references: [id], onDelete: Cascade)
  user        User?     @relation(fields: [userId], references: [id])

  @@map("useful_comments")
}

model FeedbackComment {
  id        String  @id @default(uuid())
  commentId String // Foreign key for Comment
  comment   Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)

  @@map("feedback_comments")
}

model RecipeComment {
  recipeId  String // Foreign key for Recipe
  commentId String // Foreign key for Comment
  recipe    Recipe  @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  comment   Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)

  @@id([recipeId, commentId])
  @@map("recipe_comments")
}

model MenuComments {
  menuId    String // Foreign key for Menu
  commentId String // Foreign key for Comment
  menu      Menu    @relation(fields: [menuId], references: [id], onDelete: Cascade)
  comment   Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)

  @@id([menuId, commentId])
  @@map("menu_comments")
}

model EventComment {
  eventId   String // Foreign key for Event
  commentId String // Foreign key for Comment
  event     Event   @relation(fields: [eventId], references: [id], onDelete: Cascade)
  comment   Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)

  @@id([eventId, commentId])
  @@map("event_comments")
}

model Event {
  id           String    @id @default(uuid())
  name         String
  hostId       String // Foreign key for User
  eventDate    DateTime? @map("event_date")
  location     String?
  description  String?
  menuId       String? // Foreign key for Menu
  guests       String?
  chef         String?
  isPrivate    Boolean?  @default(true) @map("is_private")
  createdDate  DateTime? @default(now()) @map("created_date")
  modifiedDate DateTime? @default(now()) @map("modified_date")

  eventComment EventComment[]
  eventGuest   EventGuest[]
  menu         Menu?          @relation(fields: [menuId], references: [id])
  user         User           @relation("UserEvents", fields: [hostId], references: [id])

  @@map("events")
}

model EventGuest {
  id          String    @id @default(uuid())
  eventId     String // Foreign key for Event
  userId      String? // Foreign key for User
  name        String? // e.g., Joe Smith
  rsvp        String? // rsvp status: yes, no, maybe
  role        String? // e.g., host, guest, chef
  createdDate DateTime? @default(now()) @map("created_date")
  updatedDate DateTime? @default(now()) @map("updated_date")
  event       Event     @relation(fields: [eventId], references: [id], onDelete: Cascade)
  user        User?     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("event_guests")
}

model MenuRecipe {
  menuId   String // Foreign key for Menu
  recipeId String // Foreign key for Recipe
  addedBy  String? // Foreign key for User

  createdDate DateTime? @default(now()) @map("created_date")
  updatedDate DateTime? @default(now()) @map("updated_date")

  menu   Menu   @relation(fields: [menuId], references: [id], onDelete: Cascade)
  recipe Recipe @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  user   User?  @relation("UserAddedMenuRecipes", fields: [addedBy], references: [id])

  @@id([menuId, recipeId])
  @@map("menu_recipes")
}

// Inspiration
// https://schema.org/Menu
model Menu {
  id             String         @id @default(uuid())
  userId         String? // Foreign key for User
  name           String
  feedsNumPeople Int?
  createdDate    DateTime?      @default(now()) @map("created_date")
  updatedDate    DateTime?      @default(now()) @map("updated_date")
  event          Event[]
  menuComments   MenuComments[]
  menuRecipe     MenuRecipe[]
  menuTag        MenuTag[]
  user           User?          @relation(fields: [userId], references: [id])

  @@map("menus")
}

model RecipeIngredient {
  recipeId      String // Foreign key for Recipe
  id            String    @id @default(uuid())
  name          String
  quantity      String?
  unit          String?
  note          String?
  rawIngredient String? // When imported, this is what was originally surfaced in the recipe before parsing
  createdDate   DateTime? @default(now()) @map("created_date")
  updatedDate   DateTime? @default(now()) @map("updated_date")
  recipe        Recipe    @relation(fields: [recipeId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([name], name: "recipe_ingredients_name")
  @@map("recipe_ingredients")
}

model Rating {
  id           String         @id @default(uuid())
  rating       Int
  submittedBy  String? // Foreign key for User
  createdDate  DateTime?      @default(now()) @map("created_date")
  updatedDate  DateTime?      @default(now()) @map("updated_date")
  user         User?          @relation(fields: [submittedBy], references: [id])
  recipeRating RecipeRating[]

  @@map("ratings")
}

model RecipeRating {
  // id       String  @id @default(uuid())
  recipeId String // Foreign key for Recipe
  ratingId String // Foreign key for Rating
  userId   String?
  recipe   Recipe  @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  rating   Rating  @relation(fields: [ratingId], references: [id], onDelete: Cascade)
  user     User?   @relation(fields: [userId], references: [id])

  @@id([recipeId, ratingId])
  @@map("recipe_rating")
}

model RecipeTag {
  recipeId    String // Foreign key for Recipe
  tagId       String // Foreign key for Tag
  addedBy     String? // Foreign key for User
  createdDate DateTime? @default(now()) @map("created_date")
  updatedDate DateTime? @default(now()) @map("updated_date")
  recipe      Recipe    @relation(fields: [recipeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  tag         Tag       @relation(fields: [tagId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  User        User?     @relation(fields: [addedBy], references: [id])

  @@id([recipeId, tagId])
  @@map("recipe_tags")
}

model MenuTag {
  menuId      String // Foreign key for Menu
  tagId       String // Foreign key for Tag
  addedBy     String // Foreign key for User
  createdDate DateTime? @default(now()) @map("created_date")
  updatedDate DateTime? @default(now()) @map("updated_date")
  menu        Menu      @relation(fields: [menuId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  tag         Tag       @relation(fields: [tagId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  user        User?     @relation(fields: [addedBy], references: [id])

  @@id([menuId, tagId])
  @@map("menu_tags")
}

// Inspiration
// https://schema.org/Recipe
model Recipe {
  id               String   @id @default(uuid())
  cookTime         String?  @map("cook_time")
  description      String?
  isPrivate        Boolean? @default(false) @map("is_private")
  preparationSteps String   @map("preparation_steps")
  prepTime         String?  @map("prep_time")
  recipeYield      String?  @map("recipe_yield")
  source           String?
  sourceUrl        String?  @map("source_url")
  submittedBy      String // Foreign key for User
  title            String
  totalTime        String?  @map("total_time")

  // meta
  createdDate DateTime? @default(now()) @map("created_date")
  updatedDate DateTime? @default(now()) @map("updated_date")

  // Relationships
  menuRecipes           MenuRecipe[]
  recipeTags            RecipeTag[]
  recipeRating          RecipeRating[]
  recipeIngredients     RecipeIngredient[]
  recipeComment         RecipeComment[]
  user                  User                   @relation("UserSubmittedRecipes", fields: [submittedBy], references: [id])
  userRecipeCollections UserRecipeCollection[]
  userRecipes           UserCookLog[]

  @@map("recipes")
}

model Tag {
  id          String      @id @default(uuid())
  name        String      @unique
  createdDate DateTime?   @default(now()) @map("created_date")
  updatedDate DateTime?   @default(now()) @map("updated_date")
  RecipeTag   RecipeTag[]
  MenuTag     MenuTag[]

  @@map("tags")
}

model Collection {
  id                   String                 @id @default(uuid())
  userId               String // Foreign key for User
  name                 String
  isPrivate            Boolean?               @default(false) @map("is_private")
  isDefault            Boolean?               @default(false) @map("is_default")
  createdDate          DateTime?              @default(now()) @map("created_date")
  updatedDate          DateTime?              @default(now()) @map("updated_date")
  user                 User                   @relation(fields: [userId], references: [id])
  UserRecipeCollection UserRecipeCollection[]
  CollectionAccess     CollectionAccess[]

  @@unique([name, userId]) // May ultimately loosen this, but seems like a reasonable constraint right now.
  @@map("collections")
}

model CollectionAccess {
  collectionId String // Foreign key for Collection
  userId       String // Foreign key for User
  accessLevel  String     @default("read") // Access levels: read, write, admin
  createdDate  DateTime?  @default(now()) @map("created_date")
  updatedDate  DateTime?  @default(now()) @map("updated_date")
  collection   Collection @relation(fields: [collectionId], references: [id], onDelete: Cascade)
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, collectionId])
  @@map("collection_access")
}

model UserRecipeCollection {
  userId       String // Foreign key for User
  recipeId     String // Foreign key for Recipe
  collectionId String // Foreign key for Collection
  createdDate  DateTime?  @default(now()) @map("created_date")
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  recipe       Recipe     @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  collection   Collection @relation(fields: [collectionId], references: [id], onDelete: Cascade)

  @@id([userId, recipeId, collectionId])
  @@map("user_recipe_collections")
}

model UserCookLog {
  userId      String // Foreign key for User
  recipeId    String // Foreign key for Recipe
  cookCount   Int?      @default(0) @map("cook_count")
  lastCooked  DateTime? @map("last_cooked")
  firstCooked DateTime? @default(now()) @map("first_cooked")
  user        User      @relation(fields: [userId], references: [id])
  recipe      Recipe    @relation(fields: [recipeId], references: [id], onDelete: Cascade)

  @@id([userId, recipeId])
  @@map("user_cook_logs")
}

model UserInvite {
  id           String    @id @default(uuid())
  email        String?   @unique
  phoneNumber  String?   @unique
  createdDate  DateTime? @default(now()) @map("created_date")
  acceptedDate DateTime? @map("accepted_date")
  status       String?   @default("pending")
  User         User?     @relation(fields: [userId], references: [id])
  userId       String?

  @@map("user_invites")
}

model User {
  id          String  @id @default(uuid())
  username    String  @unique
  role        String  @default("user") // Roles: user, admin
  email       String?
  phoneNumber String?
  name        String?
  status      String? @default("pending") // Custom type conversion needed

  createdDate   DateTime? @default(now()) @map("created_date")
  updatedDate   DateTime? @default(now()) @map("updated_date")
  lastLoginDate DateTime? @default(now()) @map("last_login_date")

  collection           Collection[]
  collectionAccess     CollectionAccess[]
  comments             Comment[]              @relation("UserComments")
  events               Event[]                @relation("UserEvents")
  eventGuest           EventGuest[]
  menu                 Menu[]
  menuRecipes          MenuRecipe[]           @relation("UserAddedMenuRecipes")
  menuTag              MenuTag[]
  submittedRecipes     Recipe[]               @relation("UserSubmittedRecipes")
  password             Password?
  rating               Rating[]
  recipeRating         RecipeRating[]
  recipeTag            RecipeTag[]
  usefulComment        UsefulComment[]
  userInvite           UserInvite[]
  userRecipeCollection UserRecipeCollection[]
  userRecipes          UserCookLog[]

  @@map("users")
}

model Password {
  encryptedPassword String    @map("encrypted_password")
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId            String    @unique
  createdDate       DateTime? @default(now()) @map("created_date")
  updatedDate       DateTime? @default(now()) @map("updated_date")
}
